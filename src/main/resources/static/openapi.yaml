openapi: 3.1.0
info:
  title: WhatchUp
  description: API para la gestión de reportes de seguridad ciudadana y bienestar comunitario.
  version: 2.0.0
servers:
  - url: 'https://localhost:8080/WhatchUpAPI/v1'
    description: Servidor de desarrollo

paths:
  # Autenticación y usuarios
  /auth/register:
    post:
      summary: Registrar un nuevo usuario
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        "201":
          description: Usuario registrado con éxito (se envió código de activación)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BasicResponse"
        "400":
          description: Error en los datos enviados
        "409":
          description: Email ya registrado
        "500":
          description: Error en el servidor

  /auth/activate:
    post:
      summary: Activar cuenta de usuario
      operationId: activateUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                activationCode:
                  type: string
      responses:
        "200":
          description: Cuenta activada correctamente
        "400":
          description: Código inválido o expirado
        "404":
          description: Usuario no encontrado
        "500":
          description: Error en el servidor

  /auth/login:
    post:
      summary: Iniciar sesión
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: Autenticación exitosa
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    $ref: "#/components/schemas/UserResponse"
        "401":
          description: Credenciales inválidas o cuenta no activada
        "500":
          description: Error en el servidor

  /auth/forgot-password:
    post:
      summary: Solicitar recuperación de contraseña
      operationId: forgotPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
      responses:
        "200":
          description: Correo con código de recuperación enviado
        "404":
          description: Email no registrado
        "500":
          description: Error en el servidor

  /auth/reset-password:
    post:
      summary: Restablecer contraseña
      operationId: resetPassword
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                resetCode:
                  type: string
                newPassword:
                  type: string
                  format: password
                  minLength: 8
      responses:
        "200":
          description: Contraseña actualizada correctamente
        "400":
          description: Código inválido o expirado
        "404":
          description: Usuario no encontrado
        "500":
          description: Error en el servidor

  /users:
    get:
      summary: Obtener todos los usuarios (Admin)
      operationId: getUsers
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/size"
      responses:
        '200':
          description: Lista de usuarios obtenida correctamente
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedUserResponse"
        '401':
          description: No autorizado
        '403':
          description: No tiene permisos para esta acción
        '500':
          description: Error en el servidor

  /users/{id}:
    get:
      summary: Obtener un usuario por ID
      operationId: getUser
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Usuario encontrado
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "401":
          description: No autorizado
        "404":
          description: Usuario no encontrado
        "500":
          description: Error en el servidor

    patch:
      summary: Actualizar contraseña de usuario
      operationId: updatePassword
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordUpdateRequest'
      responses:
        "200":
          description: Contraseña actualizada con éxito
        "400":
          description: Error al actualizar la contraseña
        "401":
          description: No autorizado
        "403":
          description: No puede cambiar la contraseña de otro usuario
        "404":
          description: Usuario no encontrado
        "500":
          description: Error en el servidor

    put:
      summary: Actualizar información de usuario
      operationId: updateUser
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserUpdateRequest"
      responses:
        "200":
          description: Usuario actualizado con éxito
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          description: Error en los datos enviados
        "401":
          description: No autorizado
        "403":
          description: No puede modificar otro usuario
        "404":
          description: Usuario no encontrado
        "500":
          description: Error en el servidor

    delete:
      summary: Desactivar cuenta de usuario
      operationId: deactivateUser
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Usuario desactivado correctamente
        "401":
          description: No autorizado
        "403":
          description: No tiene permisos para esta acción
        "404":
          description: Usuario no encontrado
        "500":
          description: Error en el servidor

  # Reportes
  /reports:
    post:
      summary: Crear un nuevo reporte
      operationId: createReport
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                description:
                  type: string
                categories:
                  type: array
                  items:
                    type: string
                latitude:
                  type: number
                  format: double
                longitude:
                  type: number
                  format: double
                images:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        "201":
          description: Reporte creado con éxito
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReportResponse"
        "400":
          description: Datos de entrada inválidos
        "401":
          description: No autenticado
        "500":
          description: Error en el servidor

    get:
      summary: Obtener todos los reportes
      operationId: getReports
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/size"
        - name: status
          in: query
          description: Filtrar por estado del reporte
          schema:
            type: string
            enum: [PENDING, VERIFIED, REJECTED, RESOLVED]
        - name: category
          in: query
          description: Filtrar por categoría
          schema:
            type: string
        - name: important
          in: query
          description: Filtrar reportes marcados como importantes
          schema:
            type: boolean
        - name: radius
          in: query
          description: Radio en kilómetros para buscar reportes cercanos (requiere lat y lng)
          schema:
            type: number
        - name: lat
          in: query
          description: Latitud para búsqueda por ubicación
          schema:
            type: number
        - name: lng
          in: query
          description: Longitud para búsqueda por ubicación
          schema:
            type: number
      responses:
        '200':
          description: Lista de reportes obtenida correctamente
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/PaginatedReportResponse"
        "500":
          description: Error en el servidor

  /reports/{id}:
    get:
      summary: Obtener un reporte por ID
      operationId: getReport
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Reporte obtenido correctamente
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReportDetailResponse"
        "404":
          description: Reporte no encontrado
        "500":
          description: Error en el servidor

    patch:
      summary: Cambiar estado de un reporte (Moderador)
      operationId: changeReportStatus
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReportChangeStatus'
      responses:
        "200":
          description: Estado del Reporte modificado correctamente
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReportResponse"
        "400":
          description: Datos de entrada inválidos
        "401":
          description: No autenticado
        "403":
          description: No autorizado para esta acción
        "404":
          description: Reporte no encontrado
        "500":
          description: Error en el servidor

    put:
      summary: Actualizar un reporte
      operationId: updateReport
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ReportUpdateRequest"
      responses:
        "200":
          description: Reporte actualizado correctamente
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ReportResponse"
        "400":
          description: Datos de entrada inválidos
        "401":
          description: No autenticado
        "403":
          description: No puede modificar este reporte
        "404":
          description: Reporte no encontrado
        "500":
          description: Error en el servidor

    delete:
      summary: Eliminar un reporte
      operationId: deleteReport
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Reporte eliminado correctamente
        "401":
          description: No autenticado
        "403":
          description: No autorizado para eliminar este reporte
        "404":
          description: Reporte no encontrado
        "500":
          description: Error en el servidor

  /reports/{id}/important:
    post:
      summary: Marcar reporte como importante
      operationId: markReportAsImportant
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Reporte marcado como importante
        "401":
          description: No autenticado
        "404":
          description: Reporte no encontrado
        "500":
          description: Error en el servidor

    delete:
      summary: Quitar marca de importante de un reporte
      operationId: unmarkReportAsImportant
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Marca de importante removida
        "401":
          description: No autenticado
        "404":
          description: Reporte no encontrado
        "500":
          description: Error en el servidor

  /reports/users/{userId}:
    get:
      summary: Obtener todos los reportes de un usuario
      operationId: getUserReports
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/size"
      responses:
        '200':
          description: Lista de reportes obtenida correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedReportResponse'
        "401":
          description: No autenticado
        "404":
          description: Usuario no encontrado
        "500":
          description: Error en el servidor

  /reports/{id}/comments:
    get:
      summary: Obtener los comentarios de un reporte
      operationId: getCommentsReport
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/size"
      responses:
        '200':
          description: Lista de comentarios obtenida correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCommentResponse'
        "404":
          description: Reporte no encontrado
        "500":
          description: Error en el servidor

    post:
      summary: Agregar un comentario a un reporte
      operationId: addCommentReport
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CommentRequest'
      responses:
        "201":
          description: Comentario creado con éxito
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentResponse'
        "401":
          description: No autenticado
        "404":
          description: Reporte no encontrado
        "500":
          description: Error en el servidor

  /reports/{id}/status-history:
    get:
      summary: Obtener el historial de estados de un reporte
      operationId: getHistoryStatusReport
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Historial de estados obtenido correctamente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StatusHistoryItem'
        '404':
          description: Reporte no encontrado
        '500':
          description: Error en el servidor

  /comments/{id}:
    delete:
      summary: Eliminar un comentario
      operationId: deleteComment
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Comentario eliminado correctamente
        "401":
          description: No autenticado
        "403":
          description: No autorizado para eliminar este comentario
        "404":
          description: Comentario no encontrado
        "500":
          description: Error en el servidor

  # Categorías
  /categories:
    post:
      summary: Crear una nueva categoría (Admin)
      operationId: createCategory
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryRequest'
      responses:
        "201":
          description: Categoría creada con éxito
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        "401":
          description: No autenticado
        "403":
          description: No autorizado para crear categorías
        "500":
          description: Error en el servidor

    get:
      summary: Obtener todas las categorías
      operationId: getCategories
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/size"
      responses:
        '200':
          description: Lista de categorías obtenida correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedCategoriesResponse'
        '500':
          description: Error en el servidor

  /categories/{id}:
    get:
      summary: Obtener una categoría por ID
      operationId: getCategory
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Categoría obtenida correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        '404':
          description: Categoría no encontrada
        '500':
          description: Error en el servidor

    put:
      summary: Actualizar una categoría (Admin)
      operationId: updateCategory
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryRequest'
      responses:
        "200":
          description: Categoría actualizada con éxito
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CategoryResponse'
        "401":
          description: No autenticado
        "403":
          description: No autorizado para esta acción
        '404':
          description: Categoría no encontrada
        "500":
          description: Error en el servidor

    delete:
      summary: Eliminar una categoría (Admin)
      operationId: deleteCategory
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Categoría eliminada correctamente
        "401":
          description: No autenticado
        "403":
          description: No autorizado para esta acción
        "404":
          description: Categoría no encontrada
        "500":
          description: Error en el servidor

  # Notificaciones
  /notifications:
    get:
      summary: Obtener notificaciones del usuario actual
      operationId: getUserNotifications
      security:
        - bearerAuth: []
      parameters:
        - $ref: "#/components/parameters/page"
        - $ref: "#/components/parameters/size"
        - name: unread
          in: query
          description: Filtrar solo no leídas
          schema:
            type: boolean
      responses:
        '200':
          description: Lista de notificaciones obtenida correctamente
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedNotificationResponse'
        '401':
          description: No autorizado
        '500':
          description: Error en el servidor

  /notifications/{id}/read:
    patch:
      summary: Marcar notificación como leída
      operationId: markNotificationRead
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Notificación marcada como leída
        '401':
          description: No autorizado
        '404':
          description: Notificación no encontrada
        '500':
          description: Error en el servidor

  # Informes
  /reports/generate-report:
    post:
      summary: Generar informe de reportes (Admin)
      operationId: generateReport
      security:
        - bearerAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                startDate:
                  type: string
                  format: date
                endDate:
                  type: string
                  format: date
                categories:
                  type: array
                  items:
                    type: string
                format:
                  type: string
                  enum: [PDF, HTML]
                  default: PDF
      responses:
        '200':
          description: Informe generado correctamente
          content:
            application/pdf:
              schema:
                type: string
                format: binary
            text/html:
              schema:
                type: string
        '401':
          description: No autorizado
        '403':
          description: No tiene permisos para esta acción
        '500':
          description: Error en el servidor

  # WebSocket
  /notifications/subscribe:
    get:
      summary: Suscribirse a notificaciones en tiempo real
      operationId: subscribeToNotifications
      security:
        - bearerAuth: []
      responses:
        '101':
          description: Switching Protocols (WebSocket)
        '401':
          description: No autorizado

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  parameters:
    page:
      name: page
      in: query
      description: Número de página (empezando desde 0)
      required: false
      schema:
        type: integer
        minimum: 0
        default: 0
    size:
      name: size
      in: query
      description: Cantidad de elementos por página
      required: false
      schema:
        type: integer
        minimum: 1
        maximum: 100
        default: 10

  schemas:
    BasicResponse:
      type: object
      properties:
        message:
          type: string
        code:
          type: integer

    UserResponse:
      type: object
      properties:
        id:
          type: string
        fullName:
          type: string
        city:
          type: string
        phoneNumber:
          type: string
        address:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
          enum: [CLIENT, ADMIN]
        isActive:
          type: boolean
        createdAt:
          type: string
          format: date-time

    RegisterRequest:
      type: object
      required: ["fullName","city","phone","address","email","password"]
      properties:
        fullName:
          type: string
          minLength: 3
          maxLength: 100
        city:
          type: string
          minLength: 2
          maxLength: 50
        phone:
          type: string
          pattern: '^[0-9]{7,15}$'
        address:
          type: string
          minLength: 5
          maxLength: 200
        email:
          type: string
          format: email
          maxLength: 100
        password:
          type: string
          format: password
          minLength: 8
          maxLength: 50

    LoginRequest:
      type: object
      required: ["email","password"]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password

    PaginatedUserResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/UserResponse'
        pageInfo:
          $ref: '#/components/schemas/PageInfo'

    PasswordUpdateRequest:
      type: object
      required: ["currentPassword","newPassword"]
      properties:
        currentPassword:
          type: string
          format: password
        newPassword:
          type: string
          format: password
          minLength: 8
          maxLength: 50

    UserUpdateRequest:
      type: object
      properties:
        fullName:
          type: string
          minLength: 3
          maxLength: 100
        city:
          type: string
          minLength: 2
          maxLength: 50
        phone:
          type: string
          pattern: '^[0-9]{7,15}$'
        address:
          type: string
          minLength: 5
          maxLength: 200

    ReportResponse:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        description:
          type: string
        status:
          type: string
          enum: [PENDING, VERIFIED, REJECTED, RESOLVED]
        importantCount:
          type: integer
        isImportant:
          type: boolean
        location:
          $ref: "#/components/schemas/Location"
        categories:
          type: array
          items:
            $ref: "#/components/schemas/CategoryResponse"
        createdAt:
          type: string
          format: date-time
        createdBy:
          $ref: "#/components/schemas/BasicUserInfo"

    ReportDetailResponse:
      allOf:
        - $ref: "#/components/schemas/ReportResponse"
        - type: object
          properties:
            images:
              type: array
              items:
                type: string
                format: uri
            commentsCount:
              type: integer
            statusHistory:
              type: array
              items:
                $ref: "#/components/schemas/StatusHistoryItem"

    PaginatedReportResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/ReportResponse'
        pageInfo:
          $ref: '#/components/schemas/PageInfo'

    ReportRequest:
      type: object
      required: ["title","categories","description","latitude","longitude"]
      properties:
        title:
          type: string
          minLength: 5
          maxLength: 100
        description:
          type: string
          minLength: 10
          maxLength: 1000
        categories:
          type: array
          items:
            type: string
          minItems: 1
        latitude:
          type: number
          format: double
        longitude:
          type: number
          format: double

    ReportUpdateRequest:
      type: object
      properties:
        title:
          type: string
          minLength: 5
          maxLength: 100
        description:
          type: string
          minLength: 10
          maxLength: 1000
        categories:
          type: array
          items:
            type: string
          minItems: 1
        status:
          type: string
          enum: [RESOLVED]
          description: Solo los clientes pueden cambiar a RESOLVED

    ReportChangeStatus:
      type: object
      required: ["newStatus"]
      properties:
        newStatus:
          type: string
          enum: [VERIFIED, REJECTED, RESOLVED]
        rejectionReason:
          type: string
          description: Requerido cuando newStatus es REJECTED
          maxLength: 500

    CommentResponse:
      type: object
      properties:
        id:
          type: string
        text:
          type: string
        createdAt:
          type: string
          format: date-time
        user:
          $ref: "#/components/schemas/BasicUserInfo"

    CommentRequest:
      type: object
      required: ["text"]
      properties:
        text:
          type: string
          minLength: 1
          maxLength: 500

    PaginatedCommentResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/CommentResponse'
        pageInfo:
          $ref: '#/components/schemas/PageInfo'

    StatusHistoryItem:
      type: object
      properties:
        status:
          type: string
          enum: [PENDING, VERIFIED, REJECTED, RESOLVED]
        changedBy:
          $ref: "#/components/schemas/BasicUserInfo"
        changedAt:
          type: string
          format: date-time
        rejectionReason:
          type: string

    Location:
      type: object
      properties:
        type:
          type: string
          enum: ["Point"]
          default: "Point"
        coordinates:
          type: array
          items:
            type: number
          minItems: 2
          maxItems: 2
          example: [-74.006, 40.7128]  # [longitud, latitud]

    CategoryRequest:
      type: object
      required: ["name"]
      properties:
        name:
          type: string
          minLength: 2
          maxLength: 50
        description:
          type: string
          maxLength: 200
        imageUrl:
          type: string
          format: uri

    CategoryResponse:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        imageUrl:
          type: string
          format: uri
        reportCount:
          type: integer

    PaginatedCategoriesResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/CategoryResponse'
        pageInfo:
          $ref: '#/components/schemas/PageInfo'

    PageInfo:
      type: object
      properties:
        totalPages:
          type: integer
          description: Número total de páginas
        totalElements:
          type: integer
          description: Número total de elementos
        currentPage:
          type: integer
          description: Página actual
        pageSize:
          type: integer
          description: Tamaño de la página
        hasNext:
          type: boolean
          description: Hay más páginas después

    BasicUserInfo:
      type: object
      properties:
        id:
          type: string
        fullName:
          type: string
        email:
          type: string

    NotificationResponse:
      type: object
      properties:
        id:
          type: string
        report:
          $ref: "#/components/schemas/BasicReportInfo"
        type:
          type: string
          enum: [NEW_REPORT, STATUS_CHANGE, NEW_COMMENT]
        message:
          type: string
        isRead:
          type: boolean
        createdAt:
          type: string
          format: date-time

    PaginatedNotificationResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/NotificationResponse'
        pageInfo:
          $ref: '#/components/schemas/PageInfo'

    BasicReportInfo:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        status:
          type: string
        location:
          $ref: "#/components/schemas/Location"