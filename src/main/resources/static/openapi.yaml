openapi: 3.1.0
info:
  title: WhatchUp
  description:  WhatchUp (API para la gestión de reportes de seguridad ciudadana y bienestar comunitario.
  version: 2.0.0
servers:
  - url: 'http://localhost:8080'
    description: Servidor de la API demo
paths:
  /auth/login:
    post:
      summary: Iniciar sesión (Autenticar un usuario).
      operationId: login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          description: "Autenticación exitosa"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponse"
        "401":
          description: "Credenciales inválidas"
        "500":
          description: "Error en el servidor"
  /auth/register:
    post:
      summary: Registrar un nuevo usuario
      operationId: register
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterRequest"
      responses:
        "200":
          description: "Usuario registrado exitosamente"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          description: "Datos de registro inválidos"
        "500":
          description: "Error en el servidor"

  /auth/activate:
      post:
        summary: Activar cuenta de usuario
        operationId: activateAccount
        requestBody:
          required: true
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountActivationRequest"
        responses:
          "200":
            description: "Cuenta activada exitosamente"
          "400":
            description: "Token de activación inválido"
          "500":
            description: "Error en el servidor"

  /auth/resend-activation:
      post:
        summary: Reenviar email de activación
        operationId: resendActivation
        parameters:
          - name: email
            in: query
            required: true
            schema:
              type: string
        responses:
          "200":
            description: "Email de activación reenviado exitosamente"
          "404":
            description: "Email no encontrado"
          "500":
            description: "Error en el servidor"

  /auth/forgot-password:
      post:
        summary: Solicitar restablecimiento de contraseña
        operationId: forgotPassword
        parameters:
          - name: email
            in: query
            required: true
            schema:
              type: string
        responses:
          "200":
            description: "Email de restablecimiento enviado exitosamente"
          "404":
            description: "Email no encontrado"
          "500":
            description: "Error en el servidor"

  /auth/reset-password:
      post:
        summary: Restablecer contraseña
        operationId: resetPassword
        parameters:
          - name: token
            in: query
            required: true
            schema:
              type: string
          - name: newPassword
            in: query
            required: true
            schema:
              type: string
        responses:
          "200":
            description: "Contraseña restablecida exitosamente"
          "400":
            description: "Token inválido o expirado"
          "500":
            description: "Error en el servidor"

  /users:
    get:
      summary: Obtener todos los usuarios
      operationId: getUsers
      parameters:
        - name: name
          in: query
          description: Filtrar por nombre
          required: false
          schema:
            type: string
        - name: email
          in: query
          description: Filtrar por email
          required: false
          schema:
            type: string
        - name: registerDate
          in: query
          description: Filtrar por fecha de registro
          required: false
          schema:
            type: string
            format: date
        - name: age
          in: query
          description: Filtrar por edad
          required: false
          schema:
            type: integer
        - name: status
          in: query
          description: Filtrar por estado (active/inactive)
          required: false
          schema:
            type: string
            enum: [ active, deleted, registered ]
        - name: order
          in: query
          description: Orden ascendente (asc) o descendente (desc)
          required: false
          schema:
            type: string
            enum: [ asc, desc ]
            default: asc
        - name: page
          in: query
          description: Número de página (empezando desde 0)
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Cantidad de elementos por página
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Lista de usuarios obtenida correctamente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PaginatedUserResponse"
        '401':
          description: "No autorizado"
        '403':
          description: "No hay permisos para esta accion"
        '500':
          description: "Error en el servidor"
  /users/{id}:
    get:
      summary: Obtener un usuario por ID
      operationId: getUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Usuario encontrado"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "404":
          description: "Usuario no encontrado"
    patch:
      summary: Actualizar contraseña de un usuario.
      operationId: updatePassword
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordUpdateRequest'
      responses:
        "200":
          description: "Contraseña actualizada con éxito"
        "400":
          description: "Error al actualizar la contraseña"
        "404":
          description: "Usuario no encontrado"
    put:
      summary: Actualizar información de un usuario.
      operationId: updateUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: "#/components/schemas/UserResponse"
      responses:
        "200":
          description: "Usuario actualizado con éxito"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        "400":
          description: "Error en los datos enviados"
        "404":
          description: "Usuario no encontrado"
    delete:
      summary: Desactivar (eliminar lógicamente) un usuario.
      operationId: deleteUser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Usuario desactivado correctamente."
        "403":
          description: "No tienes permisos para desactivar usuarios."
        "404":
          description: "Usuario no encontrado."
  /reports:
    post:
      summary: Crear un nuevo reporte.
      operationId: createReport
      requestBody:
        required: true
        content:
          #creado con IA (deepseek)
          multipart/form-data: # Tipo de contenido
            schema:
              type: object
              properties:
                metadata: # Parte 1: JSON con metadatos
                  type: string
                  format: binary
                  description: JSON con los datos del reporte, basando en reportRequest.
                images: # Parte 2: Archivos de imágenes
                  type: array
                  items:
                    type: string
                    format: binary
                  description: Lista de imágenes.
            encoding:
              metadata: # Especifica que "metadata" es un JSON
                contentType: application/json
      responses:
        "201":
          description: "Reporte creado con éxito"
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ReportResponse"
        "400":
          description: "Datos de entrada inválidos"
        "401":
          description: "No autenticado"
        "403":
          description: "No autorizado para crear reportes"
        "500":
          description: "Error en el servidor"
    get:
      summary: Obtener todos los reportes con paginacion y opcion de usuario.
      operationId: getReports
      parameters:
        - name: title
          in: query
          description: Filtrar por el titulo del reporte
          required: false
          schema:
            type: string
        - name: userId
          in: query
          description: ID del usuario para mostrar sus reportes
          required: false
          schema:
            type: string
        - name: category
          in: query
          description: Filtro por tipo de categoria
          required: false
          schema:
            type: string
        - name: status
          in: query
          description: Filtrar por estado
          required: false
          schema:
            type: string
        - name: order
          in: query
          description: Orden ascendente (asc) o descendente (desc)
          required: false
          schema:
            type: string
            enum: [ asc, desc ]
            default: asc
        - name: registerDate
          in: query
          description: Filtrar por fecha de creacion del reporte
          required: false
          schema:
            type: string
            format: date
        - name: page
          in: query
          description: Número de página (empezando desde 0)
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Cantidad de elementos por página
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Lista de reportes obtenida correctamente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/PaginatedReportResponse"
        "401":
          description: "No autenticado"
        "403":
          description: "No autorizado para ver estos reportes"
        "500":
          description: "Error en el servidor"
  /reports/{id}:
    get:
      summary: Obtener un reporte por ID.
      operationId: getReport
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Reporte obtenido correctamente"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ReportResponse"
        "401":
          description: "No autenticado"
        "403":
          description: "No autorizado para ver este reporte"
        "404":
          description: "Reporte no encontrado"
        "500":
          description: "Error en el servidor"
    patch:
      summary: Cambiar estado de un reporte.
      operationId: changeReportStatus
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ReportChangeStatus'
      responses:
        "200":
          description: "Estado del Reporte modificado correctamente"
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/ReportResponse"
        "400":
          description: "Datos de entrada inválidos"
        "401":
          description: "No autenticado"
        "403":
          description: "No autorizado para actualizar este reporte"
        "404":
          description: "Reporte no encontrado"
        "500":
          description: "Error en el servidor"
    put:
      summary: Actualizar un reporte.
      operationId: updateReport
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/ReportRequest"
      responses:
        "200":
          description: "Reporte actualizado correctamente"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/ReportResponse"
        "400":
          description: "Datos de entrada inválidos"
        "401":
          description: "No autenticado"
        "403":
          description: "No autorizado para actualizar este reporte"
        "404":
          description: "Reporte no encontrado"
        "500":
          description: "Error en el servidor"
    delete:
      summary: Eliminar un reporte.
      operationId: deleteReport
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Reporte eliminado correctamente"
        "401":
          description: "No autenticado"
        "403":
          description: "No autorizado para eliminar este reporte"
        "404":
          description: "Reporte no encontrado"
        "500":
          description: "Error en el servidor"
  /code:
    get:
      summary: Obtener todos los codigos con paginacion y opcion de usuario.
      operationId: getCode
      parameters:
        - name: status
          in: query
          description: Filtrar por estado
          required: false
          schema:
            type: string
        - name: order
          in: query
          description: Orden ascendente (asc) o descendente (desc)
          required: false
          schema:
            type: string
            enum: [ asc, desc ]
            default: asc
        - name: registerDate
          in: query
          description: Filtrar por fecha de creacion del reporte
          required: false
          schema:
            type: string
            format: date
        - name: userId
          in: query
          description: ID del usuario para mostrar su codigo de verificacion
          required: false
          schema:
            type: string
        - name: page
          in: query
          description: Número de página (empezando desde 0)
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Cantidad de elementos por página
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Lista de codigos obtenida correctamente
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/PaginatedCodeResponse"
        "401":
          description: "No autenticado"
        "403":
          description: "No autorizado para ver los codigos"
        "500":
          description: "Error en el servidor"
    post:
      summary: Crear un nuevo codigo.
      operationId: createCode
      requestBody:
        required: true
        content:
          application/json:
            schema:
              items:
                $ref: "#/components/schemas/CodeRequest"
      responses:
        "201":
          description: "Codigo creado con éxito"
          content:
            application/json:
              schema:
                items:
                  $ref: "#/components/schemas/CodeResponse"
        "400":
          description: "Datos de entrada inválidos"
        "401":
          description: "No autenticado"
        "403":
          description: "No autorizado para crear codigos"
        "500":
          description: "Error en el servidor"

  /rerports/{id}/comments:
    get:
      summary: Obtener los comentarios de un reporte.
      operationId: getCommentsReport
      parameters:
        - name: userId
          in: query
          required: false
          schema:
            type: string
        - name: registerDate
          in: query
          description: Filtrar por fecha de creacion del codigo
          required: false
          schema:
            type: string
            format: date
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum: []
        - name: idReporte
          in: query
          required: true
          schema:
            type: string
        - name: order
          in: query
          description: Orden ascendente (asc) o descendente (desc)
          required: false
          schema:
            type: string
            enum: [ asc, desc ]
            default: asc
        - name: page
          in: query
          description: Número de página (empezando desde 0)
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Cantidad de elementos por página
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Lista de comentarios obtenida correctamente del reporte
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaginatedCommentResponse'
        "401":
          description: "No autenticado"
        "404":
          description: "Usuario no encontrado"
        "500":
          description: "Error en el servidor"
    post:
      summary: Agregar un comentario a un reporte.
      operationId: addCommentReport
      parameters:
        - name: reportId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          requeried: true
          application/json:
            schema:
              $ref: '#/components/schemas/CommentRequest'
      responses:
        "201":
          description: Comentario creado con éxito
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CommentResponse'
        "404":
          description: "Reporte no encontrado"
        "500":
          description: "Error en el servidor"
        security:
          - BearerAuth: [ ]
  /status-history:
    get:
      summary: Obtener el historial de estados de un reporte.
      operationId: getHistoryStatusReport
      parameters:
        - name: reportId
          in: query
          required: false
          schema:
            type: string
        - name: category
          in: query
          description: Filtro por tipo de categoria
          required: false
          schema:
            type: string
        - name: registerDate
          in: query
          description: Filtrar por fecha de creacion del reporte
          required: false
          schema:
            type: string
            format: date
        - name: order
          in: query
          description: Orden ascendente (asc) o descendente (desc)
          required: false
          schema:
            type: string
            enum: [ asc, desc ]
            default: asc
        - name: page
          in: query
          description: Número de página (empezando desde 0)
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Cantidad de elementos por página
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Lista de comentarios obtenida correctamente del reporte
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StatusHistoryReport'
        '404':
          description: "Reporte no encontrado"
        '500':
          description: "Error en el servidor"

  /rerports/{id}/comments/{id}:
    delete:
      summary: Eliminar un comentario.
      operationId: deleteComment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Comentario eliminado correctamente"
        "401":
          description: "No autenticado"
        "403":
          description: "No autorizado para eliminar este comentario"
        "404":
          description: "Comentario no encontrado"
        "500":
          description: "Error en el servidor"
  /categories:
    post:
      summary: Crear una nueva categoría.
      operationId: createCategory
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryRequest'
      responses:
        "201":
          description: "Categoria creada con éxito"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CategoryResponse'
        "401":
          description: "No autenticado"
        "403":
          description: "No autorizado para crear reportes"
        "500":
          description: "Error en el servidor"
    get:
      summary: Obtener todas las categorías.
      operationId: getCategories
      description: Parametros para obtener la paginacion de las categorias, si son muchas
      parameters:
        - name: order
          in: query
          description: Orden ascendente (asc) o descendente (desc)
          required: false
          schema:
            type: string
            enum: [ asc, desc ]
            default: asc
        - name: name
          in: query
          description: Filtro por el nombre de categoria
          required: false
          schema:
            type: string
        - name: registerDate
          in: query
          description: Filtrar por fecha de creacion de la categoria
          required: false
          schema:
            type: string
            format: date
        - name: page
          in: query
          description: Número de página (empezando desde 0)
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Cantidad de elementos por página
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Lista de categorias obtenida correctamente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaginatedCategoriesResponse'
        '401':
          description: "No autorizado"
        '403':
          description: "No hay permisos para esta accion"
        '500':
          description: "Error en el servidor"
  /categories/{id}:
    get:
      summary: Obtener una categoría por ID.
      operationId: getCategory
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Categoria obtenida correctamente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/CategoryResponse'
        '401':
          description: "No autorizado"
        '403':
          description: "No hay permisos para esta accion"
        '404':
          description: "Categoria no encontrada"
        '500':
          description: "Error en el servidor"
    put:
      summary: Actualizar una categoría.
      operationId: updateCategory
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoryRequest'
      responses:
        "200":
          description: "Categoria modificada con éxito"
          content:
            application/json:
              schema:
                items:
                  $ref: '#/components/schemas/CategoryResponse'
        "401":
          description: "No autenticado"
        "403":
          description: "No autorizado para esta accion"
        '404':
          description: "Categoria no encontrada"
        "500":
          description: "Error en el servidor"
    delete:
      summary: Eliminar una categoría.
      operationId: deleteCategory
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: "Categoria eliminado correctamente"
        "401":
          description: "No autenticado"
        "403":
          description: "No autorizado para esta accion"
        "404":
          description: "Categoria no encontrada"
        "500":
          description: "Error en el servidor"

  /notifications:
    post:
      summary: Crear una notificación.
      operationId: createNotification
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotificationRequest'
      responses:
        "201":
          description: "notifacion hecha con éxito a usuarios cercanos"
        "400":
          description: "Error en los datos enviados"
        "500":
          description: "Error en el servidor"
    get:
      summary: Obtener todas las notificaciones de un usuario.
      operationId: getUserNotifications
      parameters:
        - name: registerDate
          in: query
          description: Filtrar por fecha de creacion del reporte
          required: false
          schema:
            type: string
            format: date
        - name: order
          in: query
          description: Orden ascendente (asc) o descendente (desc)
          required: false
          schema:
            type: string
            enum: [ asc, desc ]
            default: asc
        - name: userId
          in: query
          required: true
          schema:
            type: string
        - name: status
          in: query
          required: false
          schema:
            type: string
            enum: [ ]
        - name: page
          in: query
          description: Número de página (empezando desde 0)
          required: false
          schema:
            type: integer
            default: 0
        - name: size
          in: query
          description: Cantidad de elementos por página
          required: false
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: Lista de notificaciones obtenida correctamente
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PaginatedNotificationResponse'
        '401':
          description: "No autorizado"
        '403':
          description: "No hay permisos para esta accion"
        '404':
          description: "Usuario no encontrado"
        '500':
          description: "Error en el servidor"
  /notifications/{id}:
    patch:
      summary: Marcar una notificación como leída.
      operationId: markNotificationRead
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
        - name: id
          in: path
          required: true
          schema:
           type: string
      responses:
        '200':
          description: "Notificación marcada como leida"
        '401':
          description: "No autorizado"
        '403':
          description: "No hay permisos para esta accion"
        '404':
          description: "Notificacion no encontrada"
        '500':
          description: "Error en el servidor"

components:
  schemas:
    UserResponse:
      type: object
      properties:
        id:
          type: string
        fullName:
          type: string
        city:
          type: string
        phoneNumber:
          type: string
        address:
          type: string
        email:
          type: string
          format: email
        role:
          type: string
          enum: [ USER,ADMIN ]
        status:
          type: string
          enum: [ REGISTERED, ACTIVE, INACTIVE ]
    RegisterRequest:
      type: object
      required: ["fullName","city","phone","address","email","password"]
      properties:
        fullName:
          type: string
        city:
          type: string
        phoneNumber:
          type: string
        address:
          type: string
        email:
          type: string
          format: email
        password:
          type: string
          format: password
    LoginRequest:
      type: object
      required: ["email","password"]
      properties:
        email:
          type: string
          format: email
        password:
          type: string
          format: password
    PaginatedUserResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/UserResponse'
        paginated:
          $ref: '#/components/schemas/PaginatedContent'
    PasswordUpdateRequest:
      type: object
      required: ["currentPassword","newPassword"]
      properties:
        currentPassword:
          type: string
          format: password
        newPassword:
          type: string
          format: password
    UserUpdateRequest:
      type: object
      required: []
      properties:
        fullName:
          type: string
        city:
          type: string
        phoneNumber:
          type: string
        email:
          type: string
          format: email
        address:
          type: string
    ReportResponse:
      type: object
      properties:
        id:
          type: string
        title:
          type: string
        category:
          type: string
        description:
          type: string
        location:
          $ref: "#/components/schemas/Location"
    PaginatedReportResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/ReportResponse'
        paginated:
          $ref: '#/components/schemas/PaginatedContent'
    ReportRequest:
      type: object
      required : ["title","category","description","location","images"]
      properties:
        title:
          type: string
        description:
          type: string
        category:
          type: string
          enum: ["SEGURIDAD", "EMERGENCIA_MEDICA", "INFRAESTRUCTURA", "MASCOTAS", "COMUNIDAD"]
          example: "SEGURIDAD"
        location:
          $ref: "#/components/schemas/Location"
    ReportChangeStatus:
      type: object
      properties:
        newStatus:
          type: string
          enum: ["VERIFICADO","RECHAZADO","RESUELTO"]
    CommentResponse:
      type: object
      properties:
        id:
          type: String
        userName:
          type: string
        userId:
          type: string
        reportId:
          type: string
        comment:
          type: string
        date:
          type: date-time
          example: "2000-01-01|10:10:23"
        status:
          type: string
          enum : [ACTIVE, DELETED, REJECTED]
    CommentRequest:
      type: object
      properties:
        comment:
          type: string
          minLength: 1
          maxLength: 500
    PaginatedCommentResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/CommentResponse'
        paginated:
          $ref: '#/components/schemas/PaginatedContent'
    StatusHistoryReport:
      type: object
      properties:
        id:
          type: string
        statusHistory:
          type: array
          items:
            type: string
            format: uri
          example:
            - "https://ejemplo.com/statusHistory1.txt"
            - "https://ejemplo.com/statusHistory2.txt"
    Location:
      type: object
      properties:
        type:
          type: string
          enum: ["Point"]
          example: "Point"
        coordinates:
          type: array
          items:
            type: number
          minItems: 2
          maxItems: 2
          example: [-74.006, 40.7128]  # [longitud, latitud]
    CategoryRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
    CategoryResponse:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        id:
          type: string
        creationDate:
          type: date
    PaginatedCategoriesResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/CategoryResponse'
        paginated:
          $ref: '#/components/schemas/PaginatedContent'
    PaginatedContent:
      type: object
      properties:
        totalPages:
          type: integer
          description: Número total de páginas
        totalElements:
          type: integer
          description: Número total de elementos
        currentPage:
          type: integer
          description: Página actual
        pageSize:
          type: integer
          description: Tamaño de la página
    NotificationRequest:
      type: object
      properties:
        reportId:
          type: string
    NotificationResponse:
      type: object
      properties:
        report:
          $ref: '#/components/schemas/ReportResponse'
        read:
          type: boolean
    PaginatedNotificationResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/NotificationResponse'
        paginated:
          $ref: '#/components/schemas/PaginatedContent'

    CodeRequest:
      type: object
      properties:
        id:
          type: string
        destinyEmail:
          type: string
          format: email
        ownerName:
          type: string

    CodeResponse:
      type: object
      properties:
        id:
          type: string
        destinyEmail:
          type: string
          format: email

    PaginatedCodeResponse:
      type: object
      properties:
        content:
          type: array
          items:
            $ref: '#/components/schemas/CodeResponse'
        paginated:
          $ref: '#/components/schemas/PaginatedContent'

    LoginResponse:
      type: object
      properties:
        token:
          type: string
        user:
          $ref: "#/components/schemas/UserResponse"

    AccountActivationRequest:
      type: object
      required:
        - activationCode
        - email
      properties:
        activationCode:
          type: string
        email:
          type: string
          format: email